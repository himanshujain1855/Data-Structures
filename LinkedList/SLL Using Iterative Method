#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>

struct node
{
    int data;
    struct node *next;
};

// Global
struct node *head;

// Function Definitions

struct node *getNewNode(int value)  /// You can write too "struct node* getNewNode(int value)"
{
    struct node *new_node = (struct node*)malloc(sizeof(struct node));
    new_node->data = value;
    new_node->next = NULL;
    return new_node;
}

void insertAtBegin(int value)
{
    // getting new node
    struct node *new_node = getNewNode(value);
    // if list is not empty then.....+
    if(head!=NULL) new_node->next = head;
    /* we can eliminate above line by writing new_node->next = head;
    instead of writing new_node->next = NULL;
    but i kept it for better understanding!
    */
    head = new_node;
}

void insertAtEnd(int value)
{
    // getting new node
    struct node *new_node = getNewNode(value);

    if(head==NULL)
    {
      head = new_node;
    }

    else
    {
      struct node *temp = head;
        while(temp -> next!= NULL)
        {
            temp = temp -> next;
        }
        temp->next = new_node;
    }

}

void insertAtNth(int position,int value)
{
    // getting new node
    struct node *new_node = getNewNode(value);

    int i;
    struct node *temp = head;
        if(head == NULL)
            head = new_node;

            // This loop points to the second last position for given number
        for(i=1;i<position-1;i++)
            temp = temp -> next;

         new_node->next = temp -> next;
         temp -> next = new_node;

}

int deleteAtBegin()
{
    // if list is empty then....
    if(head==NULL)
        return 0;
    struct node *temp;
    temp = head->next;
    head->next = NULL;
    head = temp;
}
int deleteAtEnd()
{
        struct node *temp = head;

        // if list is empty then....
        if(head==NULL)
            return 0;
        while(temp -> next -> next!= NULL) // Mistake I write only  temp -> next!= NULL!
        {
            temp = temp -> next;
        }
        temp->next = NULL;
}
void deleteAtNth(int position)
{
    struct node *temp = head;
    int i;
        if(head == NULL)
            return;

        for(i=1;i<position-1;i++)
            temp = temp -> next;

        temp->next=temp->next->next;


}

void printList()
{
    struct node *temp = head;
    printf("List Is:");

    // Traversing the List
    while(temp != NULL)
    {
        printf("%d ",temp->data);
        temp = temp -> next;
    }
    printf("\n");
}

int printLength()
{
    struct node *temp = head;
    int i=0;

    // Traversing the List
    while(temp != NULL)
    {
      i++;
      temp = temp -> next;
    }
    printf("%d\n",i);

}

void reverseList()
{
    struct node *current,*next,*prev;
    current = head;
    prev = NULL;
    while(current!=NULL)
    {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    head = prev;
}

// Driver Program
int main()
{
        head = NULL;
        int count = 0;
        int running = 1;
        int choice;
        printf("\n------------------------------------------------Welcome To Single LinkedList Implementation Using Iterative Method-------------------------------------------------------------\n");
            printf("Please Select Which Operation Do You Want?\n");
            printf("-------------------------\n");
            printf("1. InsertAtBegin\n");
            printf("2. InsertAtEnd\n");
            printf("3. InsertAtNthPosition\n");
            printf("-------------------------\n");
            printf("4. DeleteAtBegin\n");
            printf("5. DeleteAtEnd\n");
            printf("6. DeleteAtNthPosition\n");
            printf("-------------------------\n");
            printf("7. Display\n");
            printf("8. Reverse The List\n");
            printf("9. Length Of The List\n");
            printf("10. Exit ");

        while(running)
        {
            if(count != 0)
                printf("Please Select Which Operation Do You Want?");
            scanf("%d",&choice);

            switch(choice)
            {
                case 1:
                    {
                        int value;
                    printf("Enter Value");
                    scanf("%d",&value);
                    insertAtBegin(value);
                    }
                    break;

                case 2:
                   {
                        int value;
                    printf("Enter Value");
                    scanf("%d",&value);
                    insertAtEnd(value);
                    }
                    break;

                case 3:
                    {
                    int value,position;

                    printf("Enter Position");
                    scanf("%d",&position);

                     printf("Enter Value");
                    scanf("%d",&value);

                    insertAtNth(position, value);
                    }
                    break;
                case 4:
                     deleteAtBegin();
                    break;
                case 5:
                   deleteAtEnd();
                    break;
                case 6:
                     {
                    int position;

                    printf("Enter Position");
                    scanf("%d",&position);

                    deleteAtNth(position);
                    }

                    break;
                case 7:
                    printList();
                    break;
                case 8:
                    reverseList();
                    break;
                case 9:
                    printLength();
                    break;
                case 10:
                    running = 0;
                    break;
            }
            count++;
        }
}
